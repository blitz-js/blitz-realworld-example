// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------
// password becomes hashedPassword

model User {
  bio            String?
  email          String    @unique
  id             Int       @id @default(autoincrement())
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String?
  hashedPassword String?
  username       String?   @unique
  articles       Article[] @relation("UserArticles")
  favorites      Article[] @relation("UserFavorites", references: [id])
  comments       Comment[] @relation("UserComments")
  followedBy     User[]    @relation("UserFollows", references: [id])
  following      User[]    @relation("UserFollows", references: [id])
  role           String    @default("USER")

  tokens   Token[]
  sessions Session[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
// enum TokenType {
//   RESET_PASSWORD
// }

model Project {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
}

// From RealWorld, plus User merged above

model Article {
  id          Int       @default(autoincrement()) @id
  slug        String    @unique
  title       String
  description String
  body        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  tagList     String
  author      User      @relation("UserArticles", fields: [authorId], references: [id])
  authorId    Int
  favoritedBy User[]    @relation("UserFavorites", references: [id])
  comments    Comment[]
}

model Comment {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  body      String
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int
  author    User     @relation("UserComments", fields: [authorId], references: [id])
  authorId  Int
}

model Tag {
  id   Int    @default(autoincrement()) @id
  name String @unique
}
